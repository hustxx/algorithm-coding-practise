[LeetCode] The Maze

Input 1: a maze represented by a 2D array

0 0 1 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 1 1
0 0 0 0 0

Input 2: start coordinate (rowStart, colStart) = (0, 4)
Input 3: destination coordinate (rowDest, colDest) = (4, 4)

Output: true
Explanation: One possible way is : left -> down -> left -> down -> right -> down -> right.
 

Example 2

Input 1: a maze represented by a 2D array

0 0 1 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 1 1
0 0 0 0 0

Input 2: start coordinate (rowStart, colStart) = (0, 4)
Input 3: destination coordinate (rowDest, colDest) = (3, 2)

Output: false
Explanation: There is no way for the ball to stop at the destination.

Note:

There is only one ball and one destination in the maze.
Both the ball and the destination exist on an empty space, and they will not be at the same position initially.
The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.
The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.


bool reachDst(vector<vector<int>>& maze, vector<int>& start, vector<int>& dest) {
	// queue {x, y}
	queue<pair<int, int>> que;
	que.push({start.first, start.second});
	pair<int, int> dst = make_pair(dest.first, dest.second);
	unordered_set<pair<int, int>> visited;
	visited.insert({start.first, start.second});
	vector<pair<int, int>> dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
	
	
	while (!que.empty()) {
		pair<int, int> tmp = que.front();
		que.pop();
		
		// try to move to 4 directions and get the final positon
		for (int i = 0; i < dir.size(); i++) {
			int x = tmp.first;
			int y = tmp.second;
			while (x + dir[i].first >= 0 && x + dir[i].first < maze.size() && y + dir[i].second >= 0 &&  \
					y + dir[i].second < maze[0].size() && maze[x + dir[i].first][y + dir[i].second] == 0) {
				x += dir[i].first;
				y += dir[i].second;
			}
			if ({x, y} == dst) {
				return true;
			}
			if (visited.find({x, y}) == visited.end()) {
				que.push_back({x, y});
				visited.insert({x, y});
			}
		}
	}
	
	return false;
}

