Partition of a set into K subsets with equal sum
Given an integer array of N elements, the task is to divide this array into K non-empty subsets such that the sum of elements in every subset is same. All elements of this array should be part of exactly one partition.
Examples:

Input : arr = [2, 1, 4, 5, 6], K = 3
Output : Yes
we can divide above array into 3 parts with equal
sum as [[2, 4], [1, 5], [6]]

Input  : arr = [2, 1, 5, 5, 6], K = 3
Output : No
It is not possible to divide above array into 3
parts with equal sum


bool isPatitionKsubSet(vector<int>& nums, int k) {
	if (k == 0) {
		return false;
	}
	int sum = 0, subSum = 0; 
	for (int n : nums) {
		sum += n;
	}
	if (sum % k != 0) {
		return false;
	}
	subSum = sum / k;
	int len = nums.size();
	vector<bool> selected(n, false);
	
	for (int i = 0; i < len; i++) {
		if (selected[i]) {
			continue;
		}
		selected[i] = true;
		if(!dfs(selected, nums, subSum, i + 1, nums[i])) {
			return false;
		}
	}
	
	return true;
}

bool dfs(vector<bool>& selected, vector<int>& nums, int target, int idx, int sum) {
	if (target == sum) {
		return true;
	} else if (target < sum) {
		return false;
	}
	
	for (int i = idx; i < nums.size(); i++) {
		if (selected[idx]) {
			continue;
		}
		selected[idx] = true;
		if (dfs(selected, nums, target, i + 1, sum + nums[i])) {
			return true;
		}
		selected[idx] = false;
	}
	return false;
}
