1, 2,  3,  4
5, 6,  7,  8
9, 10, 11, 12
1, 2,  4,  8


vector<vector<int>> getMedianNum(vector<vector<int>& matrix, int k) {
	int n = matrix.size();
	vector<vector<int>> res(n - k + 1, vector<int>(n - k + 1, 0);
	unordered_set<pair<int, int>> visited;
	multiset<int> nums;
	for (int i = 0; i < k && i < n; i++) {
		for(int j = 0; j < k && j < n; j++) {
			nums.insert(matrix[i][j]);
		}
	}
	auto mid = nums.begin();
	for (int i = 0; i < k*k / 2; i++) {
		mid++;
	}
	if (k >= n) {
		return (k % 2 == 0) ? (*mid + *prev(mid)) / 2 : *mid;
	}
	visited.insert({0, 0});
	
	nextSlidingWindow(matrix, k, 1, 0, visited, nums, mid, res);
	nextSlidingWindow(matrix, k, 0, 1, visited, nums, mid, res);
	return res;
}

void nextSlidingWindow(vector<vector<int>& matrix, int k, int x, int y, int dir, unordered_set<pair<int, int>>& visited, 
						multiset<int>& nums, multiset<int>::iterator mid, vector<vector<int>>& res) {
	if (x > n - k || y > n - k || visited.count({x, y}) != 0) {
		return;
	}
	for (int i = 0; i < k; i++) {
		if (dir == DOWN) {
			nums.insert(matrix[x + k - 1][y + k - 1 + i]);
			if (matrix[x + k - 1][y + k - 1 + i] < *mid) {
				mid--;
			}
			if (matrix[x - 1][y + i] <= *mid) {
				mid++;
			}
			nums.erase(matrix[x - 1][y + i]);
		}
	}
	
	// update mid
	res[x][y] = return (k % 2 == 0) ? (*mid + *prev(mid)) / 2 : *mid;
	visited.insert({x, y});
	// next 
	nextSlidingWindow(matrix, k, x + 1, y, visited, nums, mid, res);
	nextSlidingWindow(matrix, k, x, y + 1, visited, nums, mid, res);	
	
	return;
}
