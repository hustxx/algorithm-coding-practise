find the maximum subsets of a given unsorted array. 这个array里面可能有重复的值。限制是如果n备选了，n+1就不能再被选了。好像之前的面经里有这题。
返回这个最大值就可以。也有可能有负数。


int getMaxSubsets(vector<int> &nums) {
	//unordered_map<int, int> numMap; // num : sum of this num
	int res = INT_MIN;
	//int pre_max1, pre_max2;
	vector<int> dp(nums.size(), INT_MIN);
	sort(nums.begin(), nums.end());
	
	for (int i = 0; i < nums.size(); i++) {
		if (i == 0) {
			dp[i] = nums[i];
		} else {
			int pre = 0, run = i - 1;
			while (run >= 0 && nums[run] == nums[i] - 1) {
				run--;
			}
			// todo: move i to the end
			
			if (run >= 0) {
				pre = dp[run];
			}
			dp[i] = max(nums[i], max(pre + nums[i], dp[i - 1]);
		}
		res = max(res, dp[i]);
	}
	return res;
}


int getMaxSubset(vector<int> &nums) {
	unordered_map<int, int> numMap; // num : sum of this num
	vector<int> new_nums;
	
	sort(nums.begin(), nums.end());
	for (int idx = 0; idx < nums.size(); idx++) {
		if (idx == 0) {
			new_nums.push_back(nums[idx]);
			numMap[nums[idx]] = nums[idx];
		} else {
			if (nums[idx] == nums[idx - 1]) [
				numMap[nums[idx]] += nums[idx];
			} else {
				new_nums.push_back(nums[idx]);
				numMap[nums[idx]] = nums[idx];
			}
		}
	}
	vector<int> dp(new_nums.size(), INT_MIN);
	int dp[0] = numMap[new_nums[0]];
	
	for (int idx = 1; idx < dp.size(); idx++) {
		if (idx == 1) {
			if (new_nums[idx] == new_nums[idx - 1] + 1) {
				dp[idx] = max(numMap[new_nums[idx]], dp[idx - 1]);
			} else {
				dp[idx] = max(numMap[new_nums[idx]], max(dp[idx - 1], numMap[new_nums[idx]] + dp[idx - 1]));
			}
		} else {
			if (new_nums[idx] == new_nums[idx - 1] + 1) {
				dp[idx] = max(numMap[new_nums[idx]], max(dp[idx - 1], numMap[new_nums[idx]] + dp[idx - 2));
			} else {
				dp[idx] = max(numMap[new_nums[idx]], max(dp[idx - 1], numMap[new_nums[idx]] + dp[idx - 1]));
			}
		}
	}
	
	return dp.back();
}
