第二场：有一棵树，每个节点能有任意多的子节点。现在要求删除树中的一些边，使得得到的森林中所有的树都有偶数个节点。求一种删除的方法，使得删除的边最多。

例如：
           a
      b         c
  d   
可以删除（a －> b ) 这条边，最后得到的森林是
    b
d
和
  a
      c

struct TreeNode {
	int val;
	vector<TreeNode*> neighbors;
};
// bad solution
vector<pair<TreeNode*, int>> cutTree(TreeNode* root) {
	vector<pair<TreeNode*, int>> res;
	int num = helper(root, res);
	int total = count_total_nodes(root);
	return res;
}
// return value: how many nodes int the sub tree
int helper(TreeNode* node, vector<pair<TreeNode*, int>> &res, int total) {
	if (!node) {
		return 0;
	}
	int sub_total = 1;
	vector<int> sub_cnt; // number of nodes in each subnode
	for (int i = 0; i < node->neighbors.size(); i++) {
		int num = helper(node->neighbors[i]), res);
		sub_cnt.push_back(num);
		sub_total += num;
	}
	
		for (int idx = 0; idx < sub_cnt.size(); idx++) {
			if (sub_cnt[idx] != 0 && sub_cnt[idx] % 2 == 0 && (total - sub_cnt -) % 2) {
				res.push_back({node, i});
				total -= sub_cnt[idx];
			}
		}
	
	return total;

}
// good solution
vector<pair<TreeNode*, int>> cutTree(TreeNode* root) {
	vector<pair<TreeNode*, int>> res;
	int num = helper(root, res);
	if (num % 2 == 1) {
		return {};
	}
	return res;
}
int helper2(TreeNode* node, vector<pair<TreeNode*, int>> &res) {
	if (!node) {
		return 0;
	}
	int cnt = 1;
	vector<int> sub_cnt; // number of nodes in each subnode
	for (int i = 0; i < node->neighbors.size(); i++) {
		int num = helper(node->neighbors[i]), res);
		if (num != 0 && num % 2 == 0) {
			res.push_back({node, i});
		} else {
			cnt += num;
		}
	}
	
	return cnt;

}
