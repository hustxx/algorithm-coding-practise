There are a row of n houses, each house can be painted with one of the k colors. 
The cost of painting each house with a certain color is different. 
You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. 
For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2]is the cost of painting house 1 with color 2, 
and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Follow up:
Could you solve it in O(nk) runtime?


int minPaintCost(vector<vector<int>> costs) {
	if (costs.empty() || costs[0].empty()) {
		return 0;
	}
	vector<vector<int> dp = costs;
	int min1 = -1, min2 = -1;
	for (int i = 0; i < costs.size(); i++) {
		for (int j = 0; j < costs[0].size(); j++) {
			int last1 = min1, lats2 = min2;
			min1 = -1;
			min2 = -1;
			if (j == last1) {
				if (last2 != -1) {
					dp[i][j] = dp[i - 1][last2] + dp[i][j];
				}
			} else {
				if (last1 != -1) {
					dp[i][j] = dp[i - 1][last1] + dp[i][j];
				}
			}
			if (min1 == -1 || dp[i][j] <= dp[i][min1]) {
				min2 = min1; 
				min1 = j;
			} else if (min2 == -1 || dp[i][j] < dp[i][min2]) {
				min2 = j;
			}
		}
	}
	
	return dp.back()[min1];
}
