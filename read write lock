class read_write_lock {
private:
	mutex read_mtx;
	mutex write_mtx;
	int read_cnt; // count how many read locks we have
	
public:
	void read_lock() {
		read_mtx.lock();
		read_cnt++;
		if (read_cnt == 1) {
			write_mtx.lock();
		}
		write_status_mtx.lock();
		read_mtx.unlock();
	}
	
	void read_unlock() {
		read_mtx.lock();
		read_cnt--;
		if (read_cnt == 0) {
			write_mtx.unlock();
		}
		read_mtx.unlock();
	}
	
	void write_lock() {
		write_mtx.lock();
	}
	
	void write_unlock() {
		write_mtx.unlock();
	}
};


class rwlock_write_priority {
private:
	mutex mtx;
	conditional_variable cond;
	int cnt; // 0: no lock, >0: read lock count, <0: write lock waiting
	bool write_lock_wait;
public:
	void read_lock() {
		unique_lock<mutex> lc(mtx);
		cond.wait(lc, []{return (cnt >= 0 && !write_lock_wait);});
		cnt++;
	}
	void read_unlock() {
		mtx.lock();
		cnt--;
		if (cnt == 0) {
			cond.nofify_all();
		}
		mtx.unlock();
	}
	void write_lock() {
		unique_lock<mutex> lc(mtx);
		write_lock_wait = true;
		cond.wait(lc, []{return (cnt == 0);})
		write_lock_wait = false;
		cnt = -1;
	}
	void write_unlock() {
		mtx.lock();
		cnt = 0;
		cond.notify_all();
		mtx.unlock();
	}	
	

}

