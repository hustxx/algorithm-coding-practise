第一场： 给定一个N ＊ N的方阵，方阵中的元素非0即1；和一个整数 k < N.  现在允许交换方阵中任意两个元素的位置，求通过交换在原方阵中得到一个k ＊ k全1方阵的最小步数。
例如： . visit 1point3acres for more.
N ＝ 4， k ＝ 2， 矩阵如下：
0 0 0 1
1 0 0 0  
1 1 0 0
0 0 0 0
输出是 1， 因为只要交换 （0， 3） 和 （1， 1） 的元素即可。

//dp
int group_one(vector<vector<int>> &matrix, int k) {
	int n = matrix.size();
	vector<vector<int>> dp(n, vector<int>(n, 0)); // sum[0,0 ->i, j]
	
	dp[0][0] = matrix[0][0];
	for (int idx = 1; idx < n; idx++) {
		dp[0][idx] += dp[0][idx - 1];
		dp[idx][0] += dp[idx - 1][0];
	}
	
	for (int row = 1; row < n; row++) {
		for (int col = 1; col < n; col++) {
			dp[row][col] = dp[row - 1][col] + dp[row][col - 1] - dp[row][col] + matrix[row][col];
		}
	}
	
	int res = 0;
	for (int row = k - 1; row < n; row++) {
		for (int col = k - 1; col < n; col++) {
			int left = (col - 1 < 0) ? 0 : dp[row][col - 1];
			int up = (row - 1 < 0) ? 0 : dp[row - 1][col];
			int left_up = (col < 1 || row < 1) ? 0 : dp[row - 1][col - 1];
			res = max(res, dp[row][col] + left+up - left - up);
		}
	}
	
	return k * k - res;
}

int group_one(vector<vector<int>> &matrix, int k) {
	int cnt = 0, res = k * k;
	int n = matrix.size();
	for (int i = 0; i < k; i++) {
		for (int j = 0; j < k; j++) {
			if (matrix[i][j] == 0) {
				cnt++;
			}
		}
	}
	int start = cnt;
	res = cnt;
	for (int i = 0; i < n - k; i++) {
		for (int j = 0; j < n - k; j++) {
			if (i == 0 && j == 0) {
				continue;
			}
			if (j == 0) {
				for (int m = 0; m < k; m++) {
					if (matrix[i - 1][m] == 0) {
						start--;
					}
					if (matrix[i + k - 1][m] == 0) {
						start++;
					}
				}
				cnt = start;
			} else {
				for (int n = i; n < i + k; n++) {
					if (matrix[n][j - 1] == 0) {
						cnt--;
					}
					if (matrix[n][j - 1 + k] == 0) {
						cnt++;
					}
				}
			}
			res = min(res, cnt);
			
		}
	}
	return res;
}
