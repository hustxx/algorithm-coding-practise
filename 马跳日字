0 1 2
3 4 5
6 7 8
  9
马只能跳日字，马从1开始跳，跳n次，问总共能有多少条路径。
我先给出了dp解，然后让我用bfs/dfs再写，然后优化，分析复杂度

vector<vector<int> matrix(4, vector<int>(3, 1));
matrix[3][0] = 0;
matrix[3][2] = 0;
unorderedM_map<int, vector<int>> jump;

void pre_cal() {
	jump[0] = {5, 7};
	jump[1] = {6, 8};
	jump[2] = {3, 7};
	jump[3] = {2, 8};
	jump[4] = {};
	jump[5] = {0, 6, 9};
	jump[6] = {1, 5};
	jump[7] = {0, 2};
	jump[8] = {1, 3};
	jump[9] = {3, 5};
}

int findWays(int n) {
	// pre calculate jump
	pre_cal();
	
	vector<vector<int>> dp(n + 1, vector<int>(10, 0));
	dp[0][0] = 1;
	for (int i = 1; i <= n; i++) {
		for (int j = 0; j < 10; j++) {
			if (dp[i - 1][j] > 0) {
				for (int k = 0; k < jump[j].size(); k++) {
					dp[i][jump[j][k]] += dp[i - 1][j];
				}
			}
		}
	}
	int res = 0;
	for (int i = 0; i < 10; i++) {
		res += dp[n][i];
	}
	
	return res;
}
